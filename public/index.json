[{"authors":["admin"],"categories":null,"content":"I am a PhD candidate in Finance, focusing on commodity markets through the lens of asset pricing and risk management. I hold a Master in Banking and Finance from the University of Paris Nanterre, and have five years of commodity market analysis experience, working for consulting and trading companies. I also have a strong interest in machine learning methods (applied to Finance, natural science and natural language processing) and algorithmic trading (high-frequency / latency). I am a French citizen living in Switzerland.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a PhD candidate in Finance, focusing on commodity markets through the lens of asset pricing and risk management. I hold a Master in Banking and Finance from the University of Paris Nanterre, and have five years of commodity market analysis experience, working for consulting and trading companies. I also have a strong interest in machine learning methods (applied to Finance, natural science and natural language processing) and algorithmic trading (high-frequency / latency).","tags":null,"title":"Loïc Maréchal","type":"authors"},{"authors":[],"categories":null,"content":"","date":1600560000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600560000,"objectID":"47776f792b3d17fe6a60b1079da31594","permalink":"/talk/2020hfr_poster/","publishdate":"2019-08-28T00:00:00Z","relpermalink":"/talk/2020hfr_poster/","section":"talk","summary":"Talk given during the 2019 Non Standard Investment Choice Workshop","tags":[],"title":"Dauphine 2019 Hedge Fund Conference - poster","type":"talk"},{"authors":null,"categories":["R"],"content":"\rEfficient frontier\rIn this post, I quickly describe how to compute and update an efficient frontier in adding stocks to an existing porfolio with R.\nFirst let’s write a simple code for an efficient frontier computation\n#define a function that takes as argument a matrix of returns (MRet) and a range (sequence) of target expected returns (rangeMu)\refficient_frontier = function(MRet,rangeMu) {\r#get the row (uM) and column (pM) dimensions of the matrix of returns\ruM = dim(MRet)[1]\rpM = dim(MRet)[2]\r#compute the portfolio\u0026#39;s individual stocks expected returns\rexpRet = colMeans(MRet)\r#compute the sample var-covar matrix\rOmega = var(MRet)\r#define a vector of constraints (the weights of the portfolio must sum to one)\runityVec = rep(1,pM)\r#define a matrix of constraints (weights sum to one and variance will match a target level of expected returns)\rA = rbind(expRet,unityVec)\r#get the length of the target range (sequence)\rn = length(rangeMu)\r#define an empty variance vector\rmyVar = rep(NA,n)\r#define an empty matrix of weights for each stock at each level of target expected return\rmyWeights = matrix(data=NA,nrow=n,ncol=pM)\r#loop over the target expected returns range and compute the corresponding variances and weights\rfor(i in 1:n)\r{\rb = matrix(data=c(rangeMu[i],1),nrow=2)\rmyVar[i] = t(b)%*%solve(A%*%solve(Omega)%*%t(A))%*%b\rmyWeights[i,] = solve(Omega)%*%t(A)%*%solve(A%*%solve(Omega)%*%t(A))%*%b\r}\r#transform the computed variances in standard deviation\rmySd = myVar^0.5\r#return the standard deviation vector\rreturn(mySd)\r}\r\rIncremental efficient frontier\r#define a function that takes as argument a matrix of returns (MRet)\refficient_frontier_increment = function(MRet)\r{\r#get the column (pM) dimension of the matrix of returns\rpM = dim(MRet)[2]\r#hard code the sequence vector of target expected returns (can be passed as argument)\rrangeMu = seq(-0.01,0.05,0.001)\r#compute the standard deviation vector of the portfolio composed of the first nine stocks of the matrix\rmySd = efficient_frontier(MRet[,1:9],rangeMu)\r#get a new plot\rdev.new()\r#plot the efficient frontier of the portfolio composed of the first nine stocks\rplot(mySd*100,rangeMu*100,xlab=\u0026quot;volatility (%)\u0026quot;,ylab=\u0026quot;expected return (%)\u0026quot;,t=\u0026#39;l\u0026#39;,xlim=c(0,max(mySd*100)),ylim=c(-1,5))\r#enjoy the chart for two seconds\rSys.sleep(2)\r#loop over the rest of the stocks and increment the efficient frontier with the next additional stock\rfor(j in 10:pM)\r{\r#recompute the efficient frontier\rmySd = efficient_frontier(MRet[,1:j],rangeMu)\r#add a line of the more efficient frontier on the chart\rlines(mySd*100,rangeMu*100,col=\u0026#39;red\u0026#39;)\r#define how long you want to wait before the next one\rSys.sleep(0.1)\r}\r}\r\rResult in animation\rFig 1. Animation of an efficient frontier with stock increment\n\rTo run the code with real historical figures, I propose a *.csv file of NYSE returns\rDownload nyse_stocks_historical_returns.csv\n\r","date":1577758394,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577758394,"objectID":"72513296b7bd1daded4aab7d8aef537d","permalink":"/post/incremental_efficient_frontier/","publishdate":"2019-12-30T21:13:14-05:00","relpermalink":"/post/incremental_efficient_frontier/","section":"post","summary":"Efficient frontier\rIn this post, I quickly describe how to compute and update an efficient frontier in adding stocks to an existing porfolio with R.\nFirst let’s write a simple code for an efficient frontier computation\n#define a function that takes as argument a matrix of returns (MRet) and a range (sequence) of target expected returns (rangeMu)\refficient_frontier = function(MRet,rangeMu) {\r#get the row (uM) and column (pM) dimensions of the matrix of returns\ruM = dim(MRet)[1]\rpM = dim(MRet)[2]\r#compute the portfolio\u0026#39;s individual stocks expected returns\rexpRet = colMeans(MRet)\r#compute the sample var-covar matrix\rOmega = var(MRet)\r#define a vector of constraints (the weights of the portfolio must sum to one)\runityVec = rep(1,pM)\r#define a matrix of constraints (weights sum to one and variance will match a target level of expected returns)\rA = rbind(expRet,unityVec)\r#get the length of the target range (sequence)\rn = length(rangeMu)\r#define an empty variance vector\rmyVar = rep(NA,n)\r#define an empty matrix of weights for each stock at each level of target expected return\rmyWeights = matrix(data=NA,nrow=n,ncol=pM)\r#loop over the target expected returns range and compute the corresponding variances and weights\rfor(i in 1:n)\r{\rb = matrix(data=c(rangeMu[i],1),nrow=2)\rmyVar[i] = t(b)%*%solve(A%*%solve(Omega)%*%t(A))%*%b\rmyWeights[i,] = solve(Omega)%*%t(A)%*%solve(A%*%solve(Omega)%*%t(A))%*%b\r}\r#transform the computed variances in standard deviation\rmySd = myVar^0.","tags":["R Markdown","plot","efficient frontier","optimal portfolio choice","matrix computation"],"title":"Incremental efficient frontier","type":"post"},{"authors":null,"categories":null,"content":"In this tutorial, I explain how to emulate navigation on the SEC website, perform bulk downloads of forms (e.g. 10-K forms) and extract for each company a sentiment grade, based on basic natural language processing methods (dictionaries). The full Java package including two dictionaries of positive and negative tone words is available on my github. The SEC used to provide all forms on a FTP server, however, two years ago they stopped it and we now need this little workaround to perform bulk downloads. This tutorial is inspired from a class given to the students in the Msc in Finance at my University (Neuchâtel).\nStep 1: download index files (*.idx) from the SEC website. Code package edgar;\rimport java.io.File;\rimport java.io.IOException;\rimport java.net.MalformedURLException;\rimport java.net.URL;\rimport java.nio.file.Files;\rimport java.nio.file.Paths;\rimport java.util.Scanner;\rimport org.apache.commons.io.FileUtils;\rpublic class GetFiles {\rprivate static int beginYear = 1999;\rprivate static int endYear = 2016;\rprivate static int beginQtr = 1;\rprivate static int endQtr = 4;\rprotected static String myBaseDestination = \u0026quot;10K\\\\\u0026quot;;\rpublic static void main(String[] args) throws IOException{\rrunUrls(beginYear, endYear, beginQtr, endQtr);\r}\rpublic static void runUrls(int beginYear, int endYear, int beginQtr, int endQtr) throws IOException{\rString myBeginString = \u0026quot;idxFiles\\\\\u0026quot;;\rString myEndingString = \u0026quot;.company.idx\u0026quot;;\rString myStringFile = \u0026quot;\u0026quot;;\rFile myDestinationFile;\rfor(int i = beginYear; i \u0026lt;= endYear; i++)\r{\tfor(int j = beginQtr; j \u0026lt;= endQtr;j ++)\r{\rmyStringFile = myBeginString+String.valueOf(i)+\u0026quot;QTR\u0026quot;+String.valueOf(j)+myEndingString;\r//System.out.println(myStringFile);\rString content = new String(Files.readAllBytes(Paths.get(myStringFile)));\r//parse and download the matching files\rparseContent(content, i);\r}\r}\r}\rpublic static void parseContent(String content, int year)\r{\r// first get read of the first lines.);\rScanner contentScanner = new Scanner(content);\rint lineCount = 0;\rwhile(contentScanner.hasNextLine()) {\rString next = contentScanner.nextLine();\r//ignore the first 9 lines\rif(lineCount \u0026gt; 9){\rSystem.out.println(next);\r//get the cik\rString cik = next.substring(74,86).replaceAll(\u0026quot;\\\\s\u0026quot;,\u0026quot;\u0026quot;); //get the form type\rString formType = next.substring(62,74).replaceAll(\u0026quot;\\\\s\u0026quot;,\u0026quot;\u0026quot;);;\r//System.out.println(formType);\rif(formType.equals(\u0026quot;10-K\u0026quot;)){\rString urlToDownload = next.substring(98,150).replaceAll(\u0026quot;\\\\s\u0026quot;,\u0026quot;\u0026quot;);\rSystem.out.println(urlToDownload);\rdownloadFiles(\u0026quot;https://www.sec.gov/Archives/\u0026quot;+urlToDownload, new File(myBaseDestination+String.valueOf(year)+\u0026quot;/\u0026quot;+urlToDownload.replaceAll(\u0026quot;/\u0026quot;, \u0026quot;.\u0026quot;)));\r//alternative, use the function already defined in the G_getIdx class:\r//G_getIdx.downloadIdx(\u0026quot;https://www.sec.gov/Archives/\u0026quot;+urlToDownload, new File(myBaseDestination+String.valueOf(year)+\u0026quot;/\u0026quot;+urlToDownload.replaceAll(\u0026quot;/\u0026quot;, \u0026quot;.\u0026quot;)));\r}\r}\rlineCount++;\r}\r}\rpublic static void downloadFiles(String urlToDownload, File destinationFile){\rURL url = null;\rtry {\rurl = new URL(urlToDownload);\r} catch (MalformedURLException e) {\re.printStackTrace();\r}\rtry {\rFileUtils.copyURLToFile(url, destinationFile);\r} catch (IOException e) {\re.printStackTrace();\r}\r}\r}\r Step 2: Use the downloaded index files (*.idx) to recognize the type of forms wanted (here 10-K) Code package edgar;\rimport org.apache.commons.io.*;\rimport java.io.File;\rimport java.io.IOException;\rimport java.net.MalformedURLException;\rimport java.net.URL;\rpublic class GetIdx {\r//define the first year of the index files\rprivate static int beginYear = 1999;\r//define the last year of the index files\rprivate static int endYear = 2018;\r//same for quarters\rprivate static int beginQtr = 1;\rprivate static int endQtr = 4;\r//program entry point\rpublic static void main(String[] args){\rrunUrls(beginYear, endYear, beginQtr, endQtr);\r}\r//core method accessing every quarter year index file\rpublic static void runUrls(int beginYear, int endYear, int beginQtr, int endQtr){\rString myBeginString = \u0026quot;https://www.sec.gov/Archives/edgar/full-index/\u0026quot;;\rString myEndingString = \u0026quot;/company.idx\u0026quot;;\rString myStringUrl = \u0026quot;\u0026quot;;\rString myBaseDestination = \u0026quot;idxFiles\\\\\u0026quot;;\rFile myDestinationFile;\rfor(int i = beginYear; i \u0026lt;= endYear; i++){\rfor(int j = beginQtr; j \u0026lt;= endQtr;j ++){\rmyStringUrl = myBeginString+String.valueOf(i)+\u0026quot;/QTR\u0026quot;+String.valueOf(j)+myEndingString;\rSystem.out.println(myStringUrl);\rmyDestinationFile = new File(myBaseDestination+String.valueOf(i)+\u0026quot;QTR\u0026quot;+String.valueOf(j)+\u0026quot;.company.idx\u0026quot;);\rSystem.out.println(\u0026quot;downloading: \u0026quot;+String.valueOf(i)+\u0026quot;QTR\u0026quot;+String.valueOf(j)+\u0026quot;.company.idx\u0026quot;);\rdownloadIdx(myStringUrl, myDestinationFile);\t}\r}\r}\r//method called to download the files\rpublic static void downloadIdx(String baseUrl, File destinationFile){\rURL urlUrl = null;\rtry {\rurlUrl = new URL(baseUrl);\r} catch (MalformedURLException e) {\re.printStackTrace();\r}\rtry {\rFileUtils.copyURLToFile(urlUrl, destinationFile);\r} catch (IOException e) {\re.printStackTrace();\r}\r}\r}\r Step 3: Parse the downloaded forms to retrieve their date of submission, company identifiers and names and compute a basic sentiment grade Code package edgar;\rimport java.io.*;\rimport java.util.ArrayList;\rimport java.util.List;\rimport java.util.regex.*;\rimport org.apache.commons.io.*;\rpublic class ParseFiles {\r// 10K All Years, a folder with all downloaded files sorted to parse.\rprivate static final String sortedPath = \u0026quot;10K\\\\1999\\\\\u0026quot;;\rprivate static final String csvOutputPath = \u0026quot;outputSentiment.csv\u0026quot;;\rprivate static final File negativeDictionary = new File(\u0026quot;dictionary\\\\negativeWords.txt\u0026quot;);\rprivate static final File positiveDictionary = new File(\u0026quot;dictionary\\\\positiveWords.txt\u0026quot;);\r//private static final File positiveDictionary = new File(\u0026quot;C:\\\\Users\\\\aerial\\\\javaWorkspace\\\\dictionary\\\\positiveWords.txt\u0026quot;);\rprivate static String myOutputContent;\rprivate static List\u0026lt;String\u0026gt; positiveWords = new ArrayList\u0026lt;String\u0026gt;();\rprivate static List\u0026lt;String\u0026gt; negativeWords = new ArrayList\u0026lt;String\u0026gt;();\rprivate static String[] nameArray;\rprivate static String[] dateArray;\rprivate static String[] cikArray;\r//two arrays for the positive and negative score\rprivate static double[] positiveScoreArray;\rprivate static double[] negativeScoreArray;\rpublic static void main(String[] args) throws IOException {\t//load the positive and negative words array lists with the dictionaryReader method\rnegativeWords = dictionaryReader(negativeDictionary);\rpositiveWords = dictionaryReader(positiveDictionary);\r//load all files from the path\rFile listOfFiles[] = fileLoader(new File(sortedPath));\rSystem.out.println(listOfFiles);\rnameArray = new String[listOfFiles.length];\rdateArray = new String[listOfFiles.length];\rcikArray = new String[listOfFiles.length];\rpositiveScoreArray = new double[listOfFiles.length];\rnegativeScoreArray = new double[listOfFiles.length];\rfor (int i = 0; i \u0026lt; listOfFiles.length; i++){\rSystem.out.println(\u0026quot;index parsed is: \u0026quot;+i+\u0026quot; out of: \u0026quot;+String.valueOf(listOfFiles.length));\rFile file = listOfFiles[i];\rSystem.out.println(file);\rmyOutputContent = fileReader(file);\rSystem.out.println(\u0026quot;fileReader is done\u0026quot;);\rfileParser(myOutputContent, i);\rSystem.out.println(\u0026quot;fileParser is done\u0026quot;);\rgetSentiment(myOutputContent, i);\rSystem.out.println(\u0026quot;getSentiment is done\u0026quot;);\r}\rinfoWriter(nameArray, dateArray, cikArray, negativeScoreArray, positiveScoreArray);\r}\r//read all the files of the folders / subfolders. and return them.\rpublic static File[] fileLoader(File folderPath){\rFile[] listOfFiles = folderPath.listFiles();\rreturn (listOfFiles);\r}\t//returns the final complete text file in the form of a single string.\rpublic static String fileReader(File file) throws IOException{\rString myOutputContent = null;\rif (file.isFile() \u0026amp;\u0026amp; file.getName().endsWith(\u0026quot;.txt\u0026quot;)){\rString myCharSet = null;\rmyOutputContent = FileUtils.readFileToString(file, myCharSet);\r}\rreturn(myOutputContent);\r}\r//parse the content of the file string and isolate company names and cik using the regex abilities of Java.\rpublic static void fileParser(String fileContent, int index) throws IOException{\rPattern myBeginPattern = Pattern.compile(\u0026quot;COMPANY\\\\s*CONFORMED\\\\s*NAME\\\\s*:\\\\s*\u0026quot;);\rPattern myEndPattern = Pattern.compile(\u0026quot;CENTRAL\\\\s*INDEX\\\\s*KEY\\\\s*:\\\\s*\u0026quot;);\rMatcher myBeginMatcher = myBeginPattern.matcher(fileContent);\rMatcher myEndMatcher = myEndPattern.matcher(fileContent);\tint beginChar = (myBeginMatcher.find() ? myBeginMatcher.end() : -1);\rint endChar = (myEndMatcher.find() ? myEndMatcher.start() : -1);\rString myCompanyName = fileContent.substring(beginChar,endChar);\rmyCompanyName = myCompanyName.trim().replaceAll(\u0026quot;\\n\u0026quot;, \u0026quot;\u0026quot;);\rSystem.out.println(myCompanyName);\rmyBeginPattern = Pattern.compile(\u0026quot;CONFORMED\\\\s*PERIOD\\\\s*OF\\\\s*REPORT\\\\s*:\\\\s*\u0026quot;);\rmyEndPattern = Pattern.compile(\u0026quot;FILED\\\\s*AS\\\\s*OF\\\\s*DATE\\\\s*:\\\\s*\u0026quot;);\rmyBeginMatcher = myBeginPattern.matcher(fileContent);\rmyEndMatcher = myEndPattern.matcher(fileContent);\tbeginChar = (myBeginMatcher.find() ? myBeginMatcher.end() : -1);\rendChar = (myEndMatcher.find() ? myEndMatcher.start() : -1);\rString myFiscalEndYear = fileContent.substring(beginChar,endChar);\rmyFiscalEndYear = myFiscalEndYear.trim().replaceAll(\u0026quot;\\n\u0026quot;, \u0026quot;\u0026quot;);\rSystem.out.println(myFiscalEndYear);\rmyBeginPattern = Pattern.compile(\u0026quot;CENTRAL\\\\s*INDEX\\\\s*KEY\\\\s*:\\\\s*\u0026quot;);\rmyEndPattern = Pattern.compile(\u0026quot;STANDARD\\\\s*INDUSTRIAL\\\\s*CLASSIFICATION\\\\s*:\\\\s*\u0026quot;);\rmyBeginMatcher = myBeginPattern.matcher(fileContent);\rmyEndMatcher = myEndPattern.matcher(fileContent);\tbeginChar = (myBeginMatcher.find() ? myBeginMatcher.end() : -1);\rendChar = (myEndMatcher.find() ? myEndMatcher.start() : -1);\rString cik = fileContent.substring(beginChar,endChar);\rcik = cik.trim().replaceAll(\u0026quot;\\n\u0026quot;, \u0026quot;\u0026quot;);\rSystem.out.println(cik);\rnameArray[index] = myCompanyName;\rdateArray[index] = myFiscalEndYear;\rcikArray[index] = cik;\r}\rprivate static void getSentiment(String textFile, int indexFile) throws IOException{\rfor (int i = 0; i \u0026lt; positiveWords.size(); i++)\r{\rif (textFile.toLowerCase().contains(positiveWords.get(i).toLowerCase()))\rpositiveScoreArray[indexFile]++;\r}\rfor (int i = 0; i \u0026lt; negativeWords.size(); i++)\r{\rif (textFile.toLowerCase().contains(negativeWords.get(i).toLowerCase()))\rnegativeScoreArray[indexFile]++;\r}\t}\rpublic static List\u0026lt;String\u0026gt; dictionaryReader(File dictionary) throws IOException{\rBufferedReader br = new BufferedReader(new FileReader(dictionary));\rString line;\rList\u0026lt;String\u0026gt; wordList = new ArrayList\u0026lt;String\u0026gt;();\rwhile ((line = br.readLine()) != null){\rwordList.add(line);\rSystem.out.println(line);\r}\rreturn wordList;\r}\rpublic static void infoWriter(String[] nameArray, String[] dateArray, String[] cikArray, double[] negativeScoreArray, double[] positiveScoreArray) throws IOException{\rFileWriter writer = new FileWriter(csvOutputPath,false);\rwriter.append(\u0026quot;company name\u0026quot;);\rwriter.append(',');\rwriter.append(\u0026quot;date\u0026quot;);\rwriter.append(',');\rwriter.append(\u0026quot;cik\u0026quot;);\rwriter.append(',');\rwriter.append(\u0026quot;negative score\u0026quot;);\rwriter.append(',');\rwriter.append(\u0026quot;positive score\u0026quot;);\rwriter.append(',');\rwriter.append(\u0026quot;normalized overall score\u0026quot;);\rwriter.append('\\n');\rfor(int i = 0; i\u0026lt;nameArray.length; i++)\r{\rwriter.append(nameArray[i]);\rwriter.append(',');\rwriter.append(dateArray[i]);\rwriter.append(',');\rwriter.append(cikArray[i]);\rwriter.append(',');\rwriter.append(String.valueOf(negativeScoreArray[i]));\rwriter.append(',');\rwriter.append(String.valueOf(positiveScoreArray[i]));\rwriter.append(',');\rwriter.append(String.valueOf((positiveScoreArray[i]-negativeScoreArray[i])/(positiveScoreArray[i]+negativeScoreArray[i])));\rwriter.append('\\n');\r}\rwriter.flush();\rwriter.close();\r}\r}\r To get the full working package (including dictionaries), you can clone or import the project from my github repository\n","date":1577664000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577664000,"objectID":"6e2cd6bcd6829bfe4c458edd5a0c0e13","permalink":"/post/edgar-web-browsing-emulation-sentiment/","publishdate":"2019-12-30T00:00:00Z","relpermalink":"/post/edgar-web-browsing-emulation-sentiment/","section":"post","summary":"In this tutorial, I explain how to emulate navigation on the SEC website, perform bulk downloads of forms (e.g. 10-K forms) and extract for each company a sentiment grade, based on basic natural language processing methods (dictionaries). The full Java package including two dictionaries of positive and negative tone words is available on my github. The SEC used to provide all forms on a FTP server, however, two years ago they stopped it and we now need this little workaround to perform bulk downloads.","tags":null,"title":"SEC website bulk downloads and basic form sentiment extraction","type":"post"},{"authors":[],"categories":null,"content":"","date":1576627200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576627200,"objectID":"25101ce0c3dbc9d315d4e31b2b221780","permalink":"/talk/2019nzfm_discussion/","publishdate":"2019-08-28T00:00:00Z","relpermalink":"/talk/2019nzfm_discussion/","section":"talk","summary":"Talk given during the 2019 New Zealand Finance Meeting","tags":[],"title":"New Zealand Finance Meeting 2019 - discussion","type":"talk"},{"authors":[],"categories":null,"content":"","date":1576627200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1576627200,"objectID":"8643b7e2557b454abbeb42a551097f40","permalink":"/talk/2019nzfm_presentation/","publishdate":"2019-08-28T00:00:00Z","relpermalink":"/talk/2019nzfm_presentation/","section":"talk","summary":"Talk given during the 2019 New Zealand Finance Meeting","tags":[],"title":"New Zealand Finance Meeting 2019 - presentation","type":"talk"},{"authors":[],"categories":null,"content":"","date":1575590400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575590400,"objectID":"1b3555f4b7da3dcb49502f498ee5aecf","permalink":"/talk/2019sfm_presentation/","publishdate":"2019-08-28T00:00:00Z","relpermalink":"/talk/2019sfm_presentation/","section":"talk","summary":"Talk given during the 2019 Securities and Financial Markets Conference","tags":[],"title":"Securities and Financial Markets Conference 2019 - presentation","type":"talk"},{"authors":null,"categories":null,"content":"This research combines recent advances in the Realized Volatility (RV) literature and three specific commodity futures factors to improve the forecasts of commodity volatility. The three forecasting variables are the term structure slope, the time to maturity and a measure of supply and demand uncertainty. I first assess these variables’ empirical contribution to commodity futures volatility, in adding them in RV forecast models. First in the univariate HAR-RV of Corsi (2009) and second in the multivariate VAR-RV of Andersen, Bollerslev, Diebold, and Labys (2003). The long-term memory of assets RV justifies the former, whereas the \u0026ldquo;financialization\u0026rdquo; of commodities and the resulting commodity connectedness, supports the latter. I evaluate the out of sample validity of these forecast models and propose one risk management application. Hence, this research is important for both economic understanding and risk management purposes.\n","date":1569542400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569542400,"objectID":"a27da18f061082c3b212f77268362146","permalink":"/project/internal-project2/","publishdate":"2019-09-27T00:00:00Z","relpermalink":"/project/internal-project2/","section":"project","summary":"This research combines recent advances in the Realized Volatility (RV) literature and three specific commodity futures factors to improve the forecasts of commodity volatility. The three forecasting variables are the term structure slope, the time to maturity and a measure of supply and demand uncertainty. I first assess these variables’ empirical contribution to commodity futures volatility, in adding them in RV forecast models. First in the univariate HAR-RV of Corsi (2009) and second in the multivariate VAR-RV of Andersen, Bollerslev, Diebold, and Labys (2003).","tags":["realized volatility"],"title":"A comprehensive look at commodity volatility forecasting","type":"project"},{"authors":null,"categories":null,"content":"We identify and date a significant surge in the amount of investment tracking commodity futures indices, a phenomenon identified heretofore with anecdotal or visual evidences. Using a difference-in-differences setting on cumulative abnormal log price changes, computed with several benchmarks during the roll window of the SP-GSCI, we first find that the uncovered break in the speculative investment structure had an alleviating effect. Second, we explain the abnormal nearby and first deferred contracts price changes by measures of risk (liquidity) premium required at long (short) term horizon by speculative (hedging) activity. Finally, in a cruder market efficiency framework, we find that transaction costs incurred by an arbitrager (price taker) explain most of the abnormal term-structure change with a coefficient close to unity. In addition, this abnormal change -which is of 17 basis points at most- is never significant once we adjust the standard errors for event-induced variance and cross-correlation.\n","date":1569542400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569542400,"objectID":"5adc183a3a61c682fe6937d3aa682296","permalink":"/project/internal-project1/","publishdate":"2019-09-27T00:00:00Z","relpermalink":"/project/internal-project1/","section":"project","summary":"We identify and date a significant surge in the amount of investment tracking commodity futures indices, a phenomenon identified heretofore with anecdotal or visual evidences. Using a difference-in-differences setting on cumulative abnormal log price changes, computed with several benchmarks during the roll window of the SP-GSCI, we first find that the uncovered break in the speculative investment structure had an alleviating effect. Second, we explain the abnormal nearby and first deferred contracts price changes by measures of risk (liquidity) premium required at long (short) term horizon by speculative (hedging) activity.","tags":["commodity index investment"],"title":"The valuation effects of index investment in commodity futures","type":"project"},{"authors":[],"categories":null,"content":"","date":1568764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568764800,"objectID":"29e2290e673a5258ffec41a29d3ad706","permalink":"/talk/2019nsic_presentation/","publishdate":"2019-08-28T00:00:00Z","relpermalink":"/talk/2019nsic_presentation/","section":"talk","summary":"Talk given during the 2019 Non Standard Investment Choice Workshop","tags":[],"title":"ESSEC 2019 Non Standard Investment Choice Workshop - presentation","type":"talk"},{"authors":[],"categories":null,"content":"","date":1565222400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565222400,"objectID":"435f1e37a1ca2b04c522a86065308e18","permalink":"/talk/2019dmc_discussion/","publishdate":"2019-08-28T00:00:00Z","relpermalink":"/talk/2019dmc_discussion/","section":"talk","summary":"Discussion given during the 2019 Queenstown Derivatives Markets Conference","tags":[],"title":"Queenstown 2019 Derivatives Markets Conference - discussion","type":"talk"},{"authors":[],"categories":null,"content":"","date":1565222400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565222400,"objectID":"1aa5ac288dc2c314b8782029834c75d6","permalink":"/talk/2019dmc_presentation/","publishdate":"2019-08-28T00:00:00Z","relpermalink":"/talk/2019dmc_presentation/","section":"talk","summary":"Talk given during the 2019 Queenstown Derivatives Markets Conference","tags":[],"title":"Queenstown 2019 Derivatives Markets Conference - presentation","type":"talk"},{"authors":[],"categories":null,"content":"","date":1559779200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559779200,"objectID":"1e8f82a480734d8e5d7d0a8b46e93b67","permalink":"/talk/2019iaf_presentation/","publishdate":"2019-08-28T00:00:00Z","relpermalink":"/talk/2019iaf_presentation/","section":"talk","summary":"Talk given during 2019 IAF Research Day","tags":[],"title":"IAF 2019 Research Day - presentation","type":"talk"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Academic Academic | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let's make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"}]